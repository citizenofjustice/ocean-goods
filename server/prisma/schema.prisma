generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Priveleges {
  privelegeId   Int      @id @default(autoincrement()) @map("id")
  title         String   @db.VarChar
  createdAt     DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")
  @@map("priveleges")
}

model ProductTypes {
  productTypeId  Int       @id @default(autoincrement()) @map("id")
  type           String    @db.VarChar(255)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt      DateTime  @default(now()) @db.Timestamptz(6) @map("updated_at")
  catalog        Catalog[]
  @@map("product_types")
}

model Roles {
  roleId        Int      @id @default(autoincrement()) @map("id")
  title         String   @db.VarChar(255)
  privelegeIds  Int[]    @default([]) @map("privelege_ids")
  createdAt     DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")
  users         Users[]
  @@map("roles")
}

model Users {
  id            Int      @id @default(autoincrement())
  login         String   @unique @db.VarChar(255)
  passwordHash  String   @db.VarChar(255) @map("password_hash")
  roleId        Int      @map("role_id")
  refreshToken  String?  @db.VarChar(255) @map("refresh_token")
  createdAt     DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")
  roles         Roles    @relation(fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction)
  @@map("users")
}

model OrderItem {
  orderItemId   Int      @id @default(autoincrement())  @map("id")
  orderId       Int      @map("order_id")
  productId     Int      @map("product_id")
  amount        Int
  itemSnapshot  Json     @map("item_snapshot")
  order         Order    @relation(fields: [orderId], references: [orderId])
  catalogItem   Catalog  @relation(fields: [productId], references: [productId])
  @@map("order_items")
}

model Order {
  orderId       Int         @id @default(autoincrement())  @map("id")
  customerName  String      @db.VarChar(255)  @map("customer_name")
  customerPhone String      @db.VarChar(255)  @map("customer_phone")
  customerEmail String?     @db.VarChar(255)  @map("customer_email")
  contactMethod String?     @db.VarChar(255)  @map("contact_method")
  totalPrice    Int         @map("total_price")
  createdAt     DateTime    @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime    @default(now()) @db.Timestamptz(6) @map("updated_at")
  orderItems    OrderItem[]
  @@map("orders")
}

model Catalog {
  productId     Int            @id @default(autoincrement()) @map("id")
  productName   String         @db.VarChar(255) @map("product_name")
  productTypeId Int            @map("product_type_id")
  inStock       Boolean        @map("in_stock")
  description   String         @db.VarChar(2000)
  price         Int
  discount      Int
  weight        Int
  kcal          Int
  mainImage     String?        @db.VarChar(255) @map("main_image")
  createdAt     DateTime       @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime       @default(now()) @db.Timestamptz(6) @map("updated_at")
  productTypes  ProductTypes?  @relation(fields: [productTypeId], references: [productTypeId], onDelete: NoAction, onUpdate: NoAction)
  orderItems    OrderItem[]
  @@map("catalog")
}